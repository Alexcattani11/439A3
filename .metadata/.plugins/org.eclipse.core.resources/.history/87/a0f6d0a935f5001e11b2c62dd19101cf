[comment encoding = UTF-8 /]
[module generate('http://www.xtext.org/example/ims/IMS')]


[template public generateIMS(ims : IMS)]
[comment @main/]
[file('ims.html.', false, 'UTF-8')]
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Irrigation Management System</title>
		<script>
            function showSection() {
				var fields = document.getElementById("fields");
				var displayContainer = document.getElementById("displayContainer");
				var selectedField = fields.options[ '[' /]fields.selectedIndex[ ']' /].value;
				
				var pumps = document.getElementById("pumps");
				var selectedPump = pumps.options[ '[' /]pumps.selectedIndex[ ']' /].value;

				displayContainer.innerHTML = "";

				[for (aField : Field | ims.fields)] 
				if (selectedField === "[aField.name/]") {
					[for (irrigationRule : IrrigationRule | ims.irrigationRules)]
						[recursion(irrigationRule.expression, irrigationRule, aField)/]
					[/for]
				}
				[/for]
				[for (aPump : Pump | ims.irrigationRules.pumps)]
				[/for]
			}
        </script>
    </head>
    <body>
    	<h1>Fields, Sections, and Pumps</h1>

		<label for="fields">Select a field:</label>
		<select name="fields" id="fields" onchange="showSection()">
			[for (field : Field | ims.fields)]
				<option value="[field.name/]">[field.name/]</option>
			[/for]
		</select>

		<label for="pumps">Select a pump:</label>
		<select name="pumps" id="fields" onchange="showSection()">
			[for (irrigationRule : IrrigationRule | ims.irrigationRules)]
				[for (pump : Pump | irrigationRule.pumps)]
					<option value="[pump.name/]">[pump.name/]</option>
				[/for]
			[/for]
		</select>

		<div id="displayContainer">
			
		</div>

		<h1>Irrigation Rules</h1>
		[for (anIrrigationRule : IrrigationRule | ims.irrigationRules)]
			<p>Irrigation Rules: [irrigationRule()/]</p>
		[/for]	
	</body>
</html>
[/file]
[/template]

[template public irrigationRule(aIrrigationRule : IrrigationRule)]
If [expression(aIrrigationRule.expression)/] then [aIrrigationRule.setting/] for [for (aPump : Pump | aIrrigationRule.pumps) separator(', ')] [aPump.name/] [/for] for [aIrrigationRule.duration/] hour(s)  
[/template]

[template public expression(anExpression : Expression)]
[if (anExpression.oclIsTypeOf(AtomicExpression))][atomicExpression(anExpression.oclAsType(AtomicExpression))/][else][compoundExpression(anExpression.oclAsType(CompoundExpression))/][/if]
[/template]

[template public compoundExpression(anExpression : CompoundExpression)]
([expression(anExpression.LHS)/] [anExpression.operator/] [expression(anExpression.RHS)/])
[/template]

[template public atomicExpression(anExpression : AtomicExpression)]
(forecast = [anExpression.forecastLowerBound/] to [anExpression.forecastUpperBound/]%, [anExpression.field.name/].moisture = [anExpression.moistureLowerBound/] to [anExpression.moistureUpperBound/])
[/template]

[template public recursion(anExpression : Expression, irrigationRule : IrrigationRule, aField : Field)]

[if (anExpression.oclIsTypeOf(AtomicExpression))]
	[let atomicExpr : AtomicExpression = anExpression.oclAsType(AtomicExpression)]
		[if (atomicExpr.field.name = aField.name)]
			displayContainer.innerHTML += "<p>Irrigation Rule: [irrigationRule(irrigationRule)/]</p>";
		[/if]
	[/let]
[else]
	[let compoundExpr : CompoundExpression = anExpression.oclAsType(CompoundExpression)]
		[let leftExpression : Expression = compoundExpr.LHS][recursion(leftExpression, irrigationRule, aField)/][/let]
		[let rightExpression : Expression = compoundExpr.RHS][recursion(rightExpression, irrigationRule, aField)/][/let]
	[/let]
[/if]
[/template]
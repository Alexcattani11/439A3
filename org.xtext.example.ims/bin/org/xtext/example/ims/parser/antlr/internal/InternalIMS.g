/*
 * generated by Xtext 2.34.0
 */
grammar InternalIMS;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.ims.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.ims.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.ims.services.IMSGrammarAccess;

}

@parser::members {

 	private IMSGrammarAccess grammarAccess;

    public InternalIMSParser(TokenStream input, IMSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "IMS";
   	}

   	@Override
   	protected IMSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleIMS
entryRuleIMS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIMSRule()); }
	iv_ruleIMS=ruleIMS
	{ $current=$iv_ruleIMS.current; }
	EOF;

// Rule IMS
ruleIMS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIMSAccess().getIrrigationRulesIrrigationRuleParserRuleCall_0_0());
				}
				lv_irrigationRules_0_0=ruleIrrigationRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIMSRule());
					}
					add(
						$current,
						"irrigationRules",
						lv_irrigationRules_0_0,
						"org.xtext.example.ims.IMS.IrrigationRule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getIMSAccess().getExpressionsExpressionParserRuleCall_1_0());
				}
				lv_expressions_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIMSRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_1_0,
						"org.xtext.example.ims.IMS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getIMSAccess().getFieldsFieldParserRuleCall_2_0());
				}
				lv_fields_2_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIMSRule());
					}
					add(
						$current,
						"fields",
						lv_fields_2_0,
						"org.xtext.example.ims.IMS.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleIrrigationRule
entryRuleIrrigationRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIrrigationRuleRule()); }
	iv_ruleIrrigationRule=ruleIrrigationRule
	{ $current=$iv_ruleIrrigationRule.current; }
	EOF;

// Rule IrrigationRule
ruleIrrigationRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='If'
		{
			newLeafNode(otherlv_0, grammarAccess.getIrrigationRuleAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIrrigationRuleAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIrrigationRuleAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIrrigationRuleRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.example.ims.IMS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIrrigationRuleAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='then'
		{
			newLeafNode(otherlv_4, grammarAccess.getIrrigationRuleAccess().getThenKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIrrigationRuleAccess().getSettingWaterSettingEnumRuleCall_5_0());
				}
				lv_setting_5_0=ruleWaterSetting
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIrrigationRuleRule());
					}
					set(
						$current,
						"setting",
						lv_setting_5_0,
						"org.xtext.example.ims.IMS.WaterSetting");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='for'
		{
			newLeafNode(otherlv_6, grammarAccess.getIrrigationRuleAccess().getForKeyword_6());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIrrigationRuleRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getIrrigationRuleAccess().getPumpsPumpCrossReference_7_0_0());
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getIrrigationRuleAccess().getCommaKeyword_7_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getIrrigationRuleRule());
							}
						}
						otherlv_9=RULE_ID
						{
							newLeafNode(otherlv_9, grammarAccess.getIrrigationRuleAccess().getPumpsPumpCrossReference_7_1_1_0());
						}
					)
				)
			)*
		)+
		otherlv_10='for'
		{
			newLeafNode(otherlv_10, grammarAccess.getIrrigationRuleAccess().getForKeyword_8());
		}
		(
			(
				lv_duration_11_0=RULE_INT
				{
					newLeafNode(lv_duration_11_0, grammarAccess.getIrrigationRuleAccess().getDurationINTTerminalRuleCall_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIrrigationRuleRule());
					}
					setWithLastConsumed(
						$current,
						"duration",
						lv_duration_11_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_12='hour'
		{
			newLeafNode(otherlv_12, grammarAccess.getIrrigationRuleAccess().getHourKeyword_10());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAtomicExpressionParserRuleCall_0());
		}
		this_AtomicExpression_0=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getCompoundExpressionParserRuleCall_1());
		}
		this_CompoundExpression_1=ruleCompoundExpression
		{
			$current = $this_CompoundExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='F'
		{
			newLeafNode(otherlv_0, grammarAccess.getFieldAccess().getFKeyword_0());
		}
		(
			(
				lv_assetNumber_1_0=RULE_ID
				{
					newLeafNode(lv_assetNumber_1_0, grammarAccess.getFieldAccess().getAssetNumberIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"assetNumber",
						lv_assetNumber_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getSectionsSectionParserRuleCall_2_0());
				}
				lv_sections_2_0=ruleSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					add(
						$current,
						"sections",
						lv_sections_2_0,
						"org.xtext.example.ims.IMS.Section");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSection
entryRuleSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSectionRule()); }
	iv_ruleSection=ruleSection
	{ $current=$iv_ruleSection.current; }
	EOF;

// Rule Section
ruleSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_assetNumber_0_0=RULE_ID
				{
					newLeafNode(lv_assetNumber_0_0, grammarAccess.getSectionAccess().getAssetNumberIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSectionRule());
					}
					setWithLastConsumed(
						$current,
						"assetNumber",
						lv_assetNumber_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getPumpsPumpParserRuleCall_1_0());
				}
				lv_pumps_1_0=rulePump
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					add(
						$current,
						"pumps",
						lv_pumps_1_0,
						"org.xtext.example.ims.IMS.Pump");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePump
entryRulePump returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPumpRule()); }
	iv_rulePump=rulePump
	{ $current=$iv_rulePump.current; }
	EOF;

// Rule Pump
rulePump returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='P'
		{
			newLeafNode(otherlv_0, grammarAccess.getPumpAccess().getPKeyword_0());
		}
		(
			(
				lv_assetNumber_1_0=RULE_ID
				{
					newLeafNode(lv_assetNumber_1_0, grammarAccess.getPumpAccess().getAssetNumberIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPumpRule());
					}
					setWithLastConsumed(
						$current,
						"assetNumber",
						lv_assetNumber_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='forecast'
		{
			newLeafNode(otherlv_0, grammarAccess.getAtomicExpressionAccess().getForecastKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAtomicExpressionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_forecastLowerBound_2_0=RULE_INT
				{
					newLeafNode(lv_forecastLowerBound_2_0, grammarAccess.getAtomicExpressionAccess().getForecastLowerBoundINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomicExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"forecastLowerBound",
						lv_forecastLowerBound_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='to'
		{
			newLeafNode(otherlv_3, grammarAccess.getAtomicExpressionAccess().getToKeyword_3());
		}
		(
			(
				lv_forecastUpperBound_4_0=RULE_INT
				{
					newLeafNode(lv_forecastUpperBound_4_0, grammarAccess.getAtomicExpressionAccess().getForecastUpperBoundINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomicExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"forecastUpperBound",
						lv_forecastUpperBound_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='%'
		{
			newLeafNode(otherlv_5, grammarAccess.getAtomicExpressionAccess().getPercentSignKeyword_5());
		}
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getAtomicExpressionAccess().getCommaKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomicExpressionRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getAtomicExpressionAccess().getFieldFieldCrossReference_7_0());
				}
			)
		)
		otherlv_8='.moisture'
		{
			newLeafNode(otherlv_8, grammarAccess.getAtomicExpressionAccess().getMoistureKeyword_8());
		}
		otherlv_9='='
		{
			newLeafNode(otherlv_9, grammarAccess.getAtomicExpressionAccess().getEqualsSignKeyword_9());
		}
		(
			(
				lv_moistureLowerBound_10_0=RULE_INT
				{
					newLeafNode(lv_moistureLowerBound_10_0, grammarAccess.getAtomicExpressionAccess().getMoistureLowerBoundINTTerminalRuleCall_10_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomicExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"moistureLowerBound",
						lv_moistureLowerBound_10_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_11='to'
		{
			newLeafNode(otherlv_11, grammarAccess.getAtomicExpressionAccess().getToKeyword_11());
		}
		(
			(
				lv_moistureUpperBound_12_0=RULE_INT
				{
					newLeafNode(lv_moistureUpperBound_12_0, grammarAccess.getAtomicExpressionAccess().getMoistureUpperBoundINTTerminalRuleCall_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomicExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"moistureUpperBound",
						lv_moistureUpperBound_12_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleCompoundExpression
entryRuleCompoundExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundExpressionRule()); }
	iv_ruleCompoundExpression=ruleCompoundExpression
	{ $current=$iv_ruleCompoundExpression.current; }
	EOF;

// Rule CompoundExpression
ruleCompoundExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getCompoundExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundExpressionAccess().getLHSExpressionParserRuleCall_1_0());
				}
				lv_LHS_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundExpressionRule());
					}
					set(
						$current,
						"LHS",
						lv_LHS_1_0,
						"org.xtext.example.ims.IMS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundExpressionAccess().getOperatorOperatorEnumRuleCall_2_0());
				}
				lv_operator_2_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"org.xtext.example.ims.IMS.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundExpressionAccess().getRHSExpressionParserRuleCall_3_0());
				}
				lv_RHS_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundExpressionRule());
					}
					set(
						$current,
						"RHS",
						lv_RHS_3_0,
						"org.xtext.example.ims.IMS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCompoundExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Rule WaterSetting
ruleWaterSetting returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='LOW'
			{
				$current = grammarAccess.getWaterSettingAccess().getLOWEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getWaterSettingAccess().getLOWEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='MEDIUM'
			{
				$current = grammarAccess.getWaterSettingAccess().getMEDIUMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getWaterSettingAccess().getMEDIUMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='HIGH'
			{
				$current = grammarAccess.getWaterSettingAccess().getHIGHEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getWaterSettingAccess().getHIGHEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Operator
ruleOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AND'
			{
				$current = grammarAccess.getOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='OR'
			{
				$current = grammarAccess.getOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getOREnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.ims.iMS.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.ims.iMS.Expression;
import org.xtext.example.ims.iMS.Field;
import org.xtext.example.ims.iMS.IMS;
import org.xtext.example.ims.iMS.IMSPackage;
import org.xtext.example.ims.iMS.IrrigationRule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>IMS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.ims.iMS.impl.IMSImpl#getFields <em>Fields</em>}</li>
 *   <li>{@link org.xtext.example.ims.iMS.impl.IMSImpl#getIrrigationRules <em>Irrigation Rules</em>}</li>
 *   <li>{@link org.xtext.example.ims.iMS.impl.IMSImpl#getExpressions <em>Expressions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IMSImpl extends MinimalEObjectImpl.Container implements IMS
{
  /**
   * The cached value of the '{@link #getFields() <em>Fields</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFields()
   * @generated
   * @ordered
   */
  protected EList<Field> fields;

  /**
   * The cached value of the '{@link #getIrrigationRules() <em>Irrigation Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIrrigationRules()
   * @generated
   * @ordered
   */
  protected EList<IrrigationRule> irrigationRules;

  /**
   * The cached value of the '{@link #getExpressions() <em>Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressions()
   * @generated
   * @ordered
   */
  protected EList<Expression> expressions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IMSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IMSPackage.Literals.IMS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Field> getFields()
  {
    if (fields == null)
    {
      fields = new EObjectContainmentEList<Field>(Field.class, this, IMSPackage.IMS__FIELDS);
    }
    return fields;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<IrrigationRule> getIrrigationRules()
  {
    if (irrigationRules == null)
    {
      irrigationRules = new EObjectContainmentEList<IrrigationRule>(IrrigationRule.class, this, IMSPackage.IMS__IRRIGATION_RULES);
    }
    return irrigationRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getExpressions()
  {
    if (expressions == null)
    {
      expressions = new EObjectContainmentEList<Expression>(Expression.class, this, IMSPackage.IMS__EXPRESSIONS);
    }
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IMSPackage.IMS__FIELDS:
        return ((InternalEList<?>)getFields()).basicRemove(otherEnd, msgs);
      case IMSPackage.IMS__IRRIGATION_RULES:
        return ((InternalEList<?>)getIrrigationRules()).basicRemove(otherEnd, msgs);
      case IMSPackage.IMS__EXPRESSIONS:
        return ((InternalEList<?>)getExpressions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IMSPackage.IMS__FIELDS:
        return getFields();
      case IMSPackage.IMS__IRRIGATION_RULES:
        return getIrrigationRules();
      case IMSPackage.IMS__EXPRESSIONS:
        return getExpressions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IMSPackage.IMS__FIELDS:
        getFields().clear();
        getFields().addAll((Collection<? extends Field>)newValue);
        return;
      case IMSPackage.IMS__IRRIGATION_RULES:
        getIrrigationRules().clear();
        getIrrigationRules().addAll((Collection<? extends IrrigationRule>)newValue);
        return;
      case IMSPackage.IMS__EXPRESSIONS:
        getExpressions().clear();
        getExpressions().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IMSPackage.IMS__FIELDS:
        getFields().clear();
        return;
      case IMSPackage.IMS__IRRIGATION_RULES:
        getIrrigationRules().clear();
        return;
      case IMSPackage.IMS__EXPRESSIONS:
        getExpressions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IMSPackage.IMS__FIELDS:
        return fields != null && !fields.isEmpty();
      case IMSPackage.IMS__IRRIGATION_RULES:
        return irrigationRules != null && !irrigationRules.isEmpty();
      case IMSPackage.IMS__EXPRESSIONS:
        return expressions != null && !expressions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //IMSImpl

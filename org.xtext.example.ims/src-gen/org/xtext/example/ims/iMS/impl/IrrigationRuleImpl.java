/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.ims.iMS.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.ims.iMS.Expression;
import org.xtext.example.ims.iMS.IMSPackage;
import org.xtext.example.ims.iMS.IrrigationRule;
import org.xtext.example.ims.iMS.Pump;
import org.xtext.example.ims.iMS.WaterSetting;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Irrigation Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.ims.iMS.impl.IrrigationRuleImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.example.ims.iMS.impl.IrrigationRuleImpl#getSetting <em>Setting</em>}</li>
 *   <li>{@link org.xtext.example.ims.iMS.impl.IrrigationRuleImpl#getPumps <em>Pumps</em>}</li>
 *   <li>{@link org.xtext.example.ims.iMS.impl.IrrigationRuleImpl#getDuration <em>Duration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IrrigationRuleImpl extends MinimalEObjectImpl.Container implements IrrigationRule
{
  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The default value of the '{@link #getSetting() <em>Setting</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSetting()
   * @generated
   * @ordered
   */
  protected static final WaterSetting SETTING_EDEFAULT = WaterSetting.LOW;

  /**
   * The cached value of the '{@link #getSetting() <em>Setting</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSetting()
   * @generated
   * @ordered
   */
  protected WaterSetting setting = SETTING_EDEFAULT;

  /**
   * The cached value of the '{@link #getPumps() <em>Pumps</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPumps()
   * @generated
   * @ordered
   */
  protected EList<Pump> pumps;

  /**
   * The default value of the '{@link #getDuration() <em>Duration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected static final int DURATION_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDuration() <em>Duration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected int duration = DURATION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IrrigationRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IMSPackage.Literals.IRRIGATION_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IMSPackage.IRRIGATION_RULE__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IMSPackage.IRRIGATION_RULE__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IMSPackage.IRRIGATION_RULE__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IMSPackage.IRRIGATION_RULE__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WaterSetting getSetting()
  {
    return setting;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSetting(WaterSetting newSetting)
  {
    WaterSetting oldSetting = setting;
    setting = newSetting == null ? SETTING_EDEFAULT : newSetting;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IMSPackage.IRRIGATION_RULE__SETTING, oldSetting, setting));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Pump> getPumps()
  {
    if (pumps == null)
    {
      pumps = new EObjectResolvingEList<Pump>(Pump.class, this, IMSPackage.IRRIGATION_RULE__PUMPS);
    }
    return pumps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getDuration()
  {
    return duration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDuration(int newDuration)
  {
    int oldDuration = duration;
    duration = newDuration;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IMSPackage.IRRIGATION_RULE__DURATION, oldDuration, duration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IMSPackage.IRRIGATION_RULE__EXPRESSION:
        return basicSetExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IMSPackage.IRRIGATION_RULE__EXPRESSION:
        return getExpression();
      case IMSPackage.IRRIGATION_RULE__SETTING:
        return getSetting();
      case IMSPackage.IRRIGATION_RULE__PUMPS:
        return getPumps();
      case IMSPackage.IRRIGATION_RULE__DURATION:
        return getDuration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IMSPackage.IRRIGATION_RULE__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case IMSPackage.IRRIGATION_RULE__SETTING:
        setSetting((WaterSetting)newValue);
        return;
      case IMSPackage.IRRIGATION_RULE__PUMPS:
        getPumps().clear();
        getPumps().addAll((Collection<? extends Pump>)newValue);
        return;
      case IMSPackage.IRRIGATION_RULE__DURATION:
        setDuration((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IMSPackage.IRRIGATION_RULE__EXPRESSION:
        setExpression((Expression)null);
        return;
      case IMSPackage.IRRIGATION_RULE__SETTING:
        setSetting(SETTING_EDEFAULT);
        return;
      case IMSPackage.IRRIGATION_RULE__PUMPS:
        getPumps().clear();
        return;
      case IMSPackage.IRRIGATION_RULE__DURATION:
        setDuration(DURATION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IMSPackage.IRRIGATION_RULE__EXPRESSION:
        return expression != null;
      case IMSPackage.IRRIGATION_RULE__SETTING:
        return setting != SETTING_EDEFAULT;
      case IMSPackage.IRRIGATION_RULE__PUMPS:
        return pumps != null && !pumps.isEmpty();
      case IMSPackage.IRRIGATION_RULE__DURATION:
        return duration != DURATION_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (setting: ");
    result.append(setting);
    result.append(", duration: ");
    result.append(duration);
    result.append(')');
    return result.toString();
  }

} //IrrigationRuleImpl

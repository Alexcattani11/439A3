/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.ims.iMS.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.ims.iMS.AtomicExpression;
import org.xtext.example.ims.iMS.Field;
import org.xtext.example.ims.iMS.IMSPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Atomic Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.ims.iMS.impl.AtomicExpressionImpl#getForecastLowerBound <em>Forecast Lower Bound</em>}</li>
 *   <li>{@link org.xtext.example.ims.iMS.impl.AtomicExpressionImpl#getForecastUpperBound <em>Forecast Upper Bound</em>}</li>
 *   <li>{@link org.xtext.example.ims.iMS.impl.AtomicExpressionImpl#getField <em>Field</em>}</li>
 *   <li>{@link org.xtext.example.ims.iMS.impl.AtomicExpressionImpl#getMoistureLowerBound <em>Moisture Lower Bound</em>}</li>
 *   <li>{@link org.xtext.example.ims.iMS.impl.AtomicExpressionImpl#getMoistureUpperBound <em>Moisture Upper Bound</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AtomicExpressionImpl extends ExpressionImpl implements AtomicExpression
{
  /**
   * The default value of the '{@link #getForecastLowerBound() <em>Forecast Lower Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForecastLowerBound()
   * @generated
   * @ordered
   */
  protected static final int FORECAST_LOWER_BOUND_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getForecastLowerBound() <em>Forecast Lower Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForecastLowerBound()
   * @generated
   * @ordered
   */
  protected int forecastLowerBound = FORECAST_LOWER_BOUND_EDEFAULT;

  /**
   * The default value of the '{@link #getForecastUpperBound() <em>Forecast Upper Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForecastUpperBound()
   * @generated
   * @ordered
   */
  protected static final int FORECAST_UPPER_BOUND_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getForecastUpperBound() <em>Forecast Upper Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForecastUpperBound()
   * @generated
   * @ordered
   */
  protected int forecastUpperBound = FORECAST_UPPER_BOUND_EDEFAULT;

  /**
   * The cached value of the '{@link #getField() <em>Field</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getField()
   * @generated
   * @ordered
   */
  protected Field field;

  /**
   * The default value of the '{@link #getMoistureLowerBound() <em>Moisture Lower Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoistureLowerBound()
   * @generated
   * @ordered
   */
  protected static final int MOISTURE_LOWER_BOUND_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMoistureLowerBound() <em>Moisture Lower Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoistureLowerBound()
   * @generated
   * @ordered
   */
  protected int moistureLowerBound = MOISTURE_LOWER_BOUND_EDEFAULT;

  /**
   * The default value of the '{@link #getMoistureUpperBound() <em>Moisture Upper Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoistureUpperBound()
   * @generated
   * @ordered
   */
  protected static final int MOISTURE_UPPER_BOUND_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMoistureUpperBound() <em>Moisture Upper Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoistureUpperBound()
   * @generated
   * @ordered
   */
  protected int moistureUpperBound = MOISTURE_UPPER_BOUND_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AtomicExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IMSPackage.Literals.ATOMIC_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getForecastLowerBound()
  {
    return forecastLowerBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setForecastLowerBound(int newForecastLowerBound)
  {
    int oldForecastLowerBound = forecastLowerBound;
    forecastLowerBound = newForecastLowerBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IMSPackage.ATOMIC_EXPRESSION__FORECAST_LOWER_BOUND, oldForecastLowerBound, forecastLowerBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getForecastUpperBound()
  {
    return forecastUpperBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setForecastUpperBound(int newForecastUpperBound)
  {
    int oldForecastUpperBound = forecastUpperBound;
    forecastUpperBound = newForecastUpperBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IMSPackage.ATOMIC_EXPRESSION__FORECAST_UPPER_BOUND, oldForecastUpperBound, forecastUpperBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field getField()
  {
    if (field != null && field.eIsProxy())
    {
      InternalEObject oldField = (InternalEObject)field;
      field = (Field)eResolveProxy(oldField);
      if (field != oldField)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IMSPackage.ATOMIC_EXPRESSION__FIELD, oldField, field));
      }
    }
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Field basicGetField()
  {
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setField(Field newField)
  {
    Field oldField = field;
    field = newField;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IMSPackage.ATOMIC_EXPRESSION__FIELD, oldField, field));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMoistureLowerBound()
  {
    return moistureLowerBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMoistureLowerBound(int newMoistureLowerBound)
  {
    int oldMoistureLowerBound = moistureLowerBound;
    moistureLowerBound = newMoistureLowerBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IMSPackage.ATOMIC_EXPRESSION__MOISTURE_LOWER_BOUND, oldMoistureLowerBound, moistureLowerBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMoistureUpperBound()
  {
    return moistureUpperBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMoistureUpperBound(int newMoistureUpperBound)
  {
    int oldMoistureUpperBound = moistureUpperBound;
    moistureUpperBound = newMoistureUpperBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IMSPackage.ATOMIC_EXPRESSION__MOISTURE_UPPER_BOUND, oldMoistureUpperBound, moistureUpperBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IMSPackage.ATOMIC_EXPRESSION__FORECAST_LOWER_BOUND:
        return getForecastLowerBound();
      case IMSPackage.ATOMIC_EXPRESSION__FORECAST_UPPER_BOUND:
        return getForecastUpperBound();
      case IMSPackage.ATOMIC_EXPRESSION__FIELD:
        if (resolve) return getField();
        return basicGetField();
      case IMSPackage.ATOMIC_EXPRESSION__MOISTURE_LOWER_BOUND:
        return getMoistureLowerBound();
      case IMSPackage.ATOMIC_EXPRESSION__MOISTURE_UPPER_BOUND:
        return getMoistureUpperBound();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IMSPackage.ATOMIC_EXPRESSION__FORECAST_LOWER_BOUND:
        setForecastLowerBound((Integer)newValue);
        return;
      case IMSPackage.ATOMIC_EXPRESSION__FORECAST_UPPER_BOUND:
        setForecastUpperBound((Integer)newValue);
        return;
      case IMSPackage.ATOMIC_EXPRESSION__FIELD:
        setField((Field)newValue);
        return;
      case IMSPackage.ATOMIC_EXPRESSION__MOISTURE_LOWER_BOUND:
        setMoistureLowerBound((Integer)newValue);
        return;
      case IMSPackage.ATOMIC_EXPRESSION__MOISTURE_UPPER_BOUND:
        setMoistureUpperBound((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IMSPackage.ATOMIC_EXPRESSION__FORECAST_LOWER_BOUND:
        setForecastLowerBound(FORECAST_LOWER_BOUND_EDEFAULT);
        return;
      case IMSPackage.ATOMIC_EXPRESSION__FORECAST_UPPER_BOUND:
        setForecastUpperBound(FORECAST_UPPER_BOUND_EDEFAULT);
        return;
      case IMSPackage.ATOMIC_EXPRESSION__FIELD:
        setField((Field)null);
        return;
      case IMSPackage.ATOMIC_EXPRESSION__MOISTURE_LOWER_BOUND:
        setMoistureLowerBound(MOISTURE_LOWER_BOUND_EDEFAULT);
        return;
      case IMSPackage.ATOMIC_EXPRESSION__MOISTURE_UPPER_BOUND:
        setMoistureUpperBound(MOISTURE_UPPER_BOUND_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IMSPackage.ATOMIC_EXPRESSION__FORECAST_LOWER_BOUND:
        return forecastLowerBound != FORECAST_LOWER_BOUND_EDEFAULT;
      case IMSPackage.ATOMIC_EXPRESSION__FORECAST_UPPER_BOUND:
        return forecastUpperBound != FORECAST_UPPER_BOUND_EDEFAULT;
      case IMSPackage.ATOMIC_EXPRESSION__FIELD:
        return field != null;
      case IMSPackage.ATOMIC_EXPRESSION__MOISTURE_LOWER_BOUND:
        return moistureLowerBound != MOISTURE_LOWER_BOUND_EDEFAULT;
      case IMSPackage.ATOMIC_EXPRESSION__MOISTURE_UPPER_BOUND:
        return moistureUpperBound != MOISTURE_UPPER_BOUND_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (forecastLowerBound: ");
    result.append(forecastLowerBound);
    result.append(", forecastUpperBound: ");
    result.append(forecastUpperBound);
    result.append(", moistureLowerBound: ");
    result.append(moistureLowerBound);
    result.append(", moistureUpperBound: ");
    result.append(moistureUpperBound);
    result.append(')');
    return result.toString();
  }

} //AtomicExpressionImpl

/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.ims.iMS.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.ims.iMS.AtomicExpression;
import org.xtext.example.ims.iMS.CompoundExpression;
import org.xtext.example.ims.iMS.Expression;
import org.xtext.example.ims.iMS.Field;
import org.xtext.example.ims.iMS.IMSFactory;
import org.xtext.example.ims.iMS.IMSPackage;
import org.xtext.example.ims.iMS.IrrigationRule;
import org.xtext.example.ims.iMS.NumberedElement;
import org.xtext.example.ims.iMS.Operator;
import org.xtext.example.ims.iMS.Pump;
import org.xtext.example.ims.iMS.Section;
import org.xtext.example.ims.iMS.WaterSetting;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class IMSPackageImpl extends EPackageImpl implements IMSPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass imsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass irrigationRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fieldEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numberedElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sectionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pumpEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass atomicExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass compoundExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum waterSettingEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum operatorEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.ims.iMS.IMSPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private IMSPackageImpl()
  {
    super(eNS_URI, IMSFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link IMSPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static IMSPackage init()
  {
    if (isInited) return (IMSPackage)EPackage.Registry.INSTANCE.getEPackage(IMSPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredIMSPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    IMSPackageImpl theIMSPackage = registeredIMSPackage instanceof IMSPackageImpl ? (IMSPackageImpl)registeredIMSPackage : new IMSPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theIMSPackage.createPackageContents();

    // Initialize created meta-data
    theIMSPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theIMSPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(IMSPackage.eNS_URI, theIMSPackage);
    return theIMSPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIMS()
  {
    return imsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIMS_IrrigationRules()
  {
    return (EReference)imsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIMS_Expressions()
  {
    return (EReference)imsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIMS_Fields()
  {
    return (EReference)imsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIrrigationRule()
  {
    return irrigationRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIrrigationRule_Expression()
  {
    return (EReference)irrigationRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIrrigationRule_Setting()
  {
    return (EAttribute)irrigationRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIrrigationRule_Pumps()
  {
    return (EReference)irrigationRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIrrigationRule_Duration()
  {
    return (EAttribute)irrigationRuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpression()
  {
    return expressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getField()
  {
    return fieldEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getField_Sections()
  {
    return (EReference)fieldEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNumberedElement()
  {
    return numberedElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNumberedElement_AssetNumber()
  {
    return (EAttribute)numberedElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSection()
  {
    return sectionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSection_Pumps()
  {
    return (EReference)sectionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPump()
  {
    return pumpEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAtomicExpression()
  {
    return atomicExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAtomicExpression_ForecastLowerBound()
  {
    return (EAttribute)atomicExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAtomicExpression_ForecastUpperBound()
  {
    return (EAttribute)atomicExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAtomicExpression_Field()
  {
    return (EReference)atomicExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAtomicExpression_MoistureLowerBound()
  {
    return (EAttribute)atomicExpressionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAtomicExpression_MoistureUpperBound()
  {
    return (EAttribute)atomicExpressionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCompoundExpression()
  {
    return compoundExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompoundExpression_LHS()
  {
    return (EReference)compoundExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCompoundExpression_Operator()
  {
    return (EAttribute)compoundExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompoundExpression_RHS()
  {
    return (EReference)compoundExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getWaterSetting()
  {
    return waterSettingEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getOperator()
  {
    return operatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IMSFactory getIMSFactory()
  {
    return (IMSFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    imsEClass = createEClass(IMS);
    createEReference(imsEClass, IMS__IRRIGATION_RULES);
    createEReference(imsEClass, IMS__EXPRESSIONS);
    createEReference(imsEClass, IMS__FIELDS);

    irrigationRuleEClass = createEClass(IRRIGATION_RULE);
    createEReference(irrigationRuleEClass, IRRIGATION_RULE__EXPRESSION);
    createEAttribute(irrigationRuleEClass, IRRIGATION_RULE__SETTING);
    createEReference(irrigationRuleEClass, IRRIGATION_RULE__PUMPS);
    createEAttribute(irrigationRuleEClass, IRRIGATION_RULE__DURATION);

    expressionEClass = createEClass(EXPRESSION);

    fieldEClass = createEClass(FIELD);
    createEReference(fieldEClass, FIELD__SECTIONS);

    numberedElementEClass = createEClass(NUMBERED_ELEMENT);
    createEAttribute(numberedElementEClass, NUMBERED_ELEMENT__ASSET_NUMBER);

    sectionEClass = createEClass(SECTION);
    createEReference(sectionEClass, SECTION__PUMPS);

    pumpEClass = createEClass(PUMP);

    atomicExpressionEClass = createEClass(ATOMIC_EXPRESSION);
    createEAttribute(atomicExpressionEClass, ATOMIC_EXPRESSION__FORECAST_LOWER_BOUND);
    createEAttribute(atomicExpressionEClass, ATOMIC_EXPRESSION__FORECAST_UPPER_BOUND);
    createEReference(atomicExpressionEClass, ATOMIC_EXPRESSION__FIELD);
    createEAttribute(atomicExpressionEClass, ATOMIC_EXPRESSION__MOISTURE_LOWER_BOUND);
    createEAttribute(atomicExpressionEClass, ATOMIC_EXPRESSION__MOISTURE_UPPER_BOUND);

    compoundExpressionEClass = createEClass(COMPOUND_EXPRESSION);
    createEReference(compoundExpressionEClass, COMPOUND_EXPRESSION__LHS);
    createEAttribute(compoundExpressionEClass, COMPOUND_EXPRESSION__OPERATOR);
    createEReference(compoundExpressionEClass, COMPOUND_EXPRESSION__RHS);

    // Create enums
    waterSettingEEnum = createEEnum(WATER_SETTING);
    operatorEEnum = createEEnum(OPERATOR);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    fieldEClass.getESuperTypes().add(this.getNumberedElement());
    sectionEClass.getESuperTypes().add(this.getNumberedElement());
    pumpEClass.getESuperTypes().add(this.getNumberedElement());
    atomicExpressionEClass.getESuperTypes().add(this.getExpression());
    compoundExpressionEClass.getESuperTypes().add(this.getExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(imsEClass, org.xtext.example.ims.iMS.IMS.class, "IMS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIMS_IrrigationRules(), this.getIrrigationRule(), null, "irrigationRules", null, 0, -1, org.xtext.example.ims.iMS.IMS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIMS_Expressions(), this.getExpression(), null, "expressions", null, 0, -1, org.xtext.example.ims.iMS.IMS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIMS_Fields(), this.getField(), null, "fields", null, 0, -1, org.xtext.example.ims.iMS.IMS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(irrigationRuleEClass, IrrigationRule.class, "IrrigationRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIrrigationRule_Expression(), this.getExpression(), null, "expression", null, 0, 1, IrrigationRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIrrigationRule_Setting(), this.getWaterSetting(), "setting", null, 0, 1, IrrigationRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIrrigationRule_Pumps(), this.getPump(), null, "pumps", null, 0, -1, IrrigationRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIrrigationRule_Duration(), ecorePackage.getEInt(), "duration", null, 0, 1, IrrigationRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionEClass, Expression.class, "Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(fieldEClass, Field.class, "Field", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getField_Sections(), this.getSection(), null, "sections", null, 0, -1, Field.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(numberedElementEClass, NumberedElement.class, "NumberedElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNumberedElement_AssetNumber(), ecorePackage.getEString(), "assetNumber", null, 0, 1, NumberedElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sectionEClass, Section.class, "Section", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSection_Pumps(), this.getPump(), null, "pumps", null, 0, -1, Section.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(pumpEClass, Pump.class, "Pump", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(atomicExpressionEClass, AtomicExpression.class, "AtomicExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAtomicExpression_ForecastLowerBound(), ecorePackage.getEInt(), "forecastLowerBound", null, 0, 1, AtomicExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAtomicExpression_ForecastUpperBound(), ecorePackage.getEInt(), "forecastUpperBound", null, 0, 1, AtomicExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAtomicExpression_Field(), this.getField(), null, "field", null, 0, 1, AtomicExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAtomicExpression_MoistureLowerBound(), ecorePackage.getEInt(), "moistureLowerBound", null, 0, 1, AtomicExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAtomicExpression_MoistureUpperBound(), ecorePackage.getEInt(), "moistureUpperBound", null, 0, 1, AtomicExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(compoundExpressionEClass, CompoundExpression.class, "CompoundExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCompoundExpression_LHS(), this.getExpression(), null, "LHS", null, 0, 1, CompoundExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCompoundExpression_Operator(), this.getOperator(), "operator", null, 0, 1, CompoundExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompoundExpression_RHS(), this.getExpression(), null, "RHS", null, 0, 1, CompoundExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(waterSettingEEnum, WaterSetting.class, "WaterSetting");
    addEEnumLiteral(waterSettingEEnum, WaterSetting.LOW);
    addEEnumLiteral(waterSettingEEnum, WaterSetting.MEDIUM);
    addEEnumLiteral(waterSettingEEnum, WaterSetting.HIGH);

    initEEnum(operatorEEnum, Operator.class, "Operator");
    addEEnumLiteral(operatorEEnum, Operator.AND);
    addEEnumLiteral(operatorEEnum, Operator.OR);

    // Create resource
    createResource(eNS_URI);
  }

} //IMSPackageImpl

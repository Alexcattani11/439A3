/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.ims.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IMSGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class IMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.IMS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_0_0 = (RuleCall)cFieldsAssignment_0.eContents().get(0);
		private final Assignment cIrrigationRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIrrigationRulesIrrigationRuleParserRuleCall_1_0 = (RuleCall)cIrrigationRulesAssignment_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		
		//IMS:
		//    (fields+=Field)*
		//    (irrigationRules+=IrrigationRule)*
		//    (expressions+=Expression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(fields+=Field)*
		//(irrigationRules+=IrrigationRule)*
		//(expressions+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//(fields+=Field)*
		public Assignment getFieldsAssignment_0() { return cFieldsAssignment_0; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_0_0() { return cFieldsFieldParserRuleCall_0_0; }
		
		//(irrigationRules+=IrrigationRule)*
		public Assignment getIrrigationRulesAssignment_1() { return cIrrigationRulesAssignment_1; }
		
		//IrrigationRule
		public RuleCall getIrrigationRulesIrrigationRuleParserRuleCall_1_0() { return cIrrigationRulesIrrigationRuleParserRuleCall_1_0; }
		
		//(expressions+=Expression)*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
	}
	public class IrrigationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.IrrigationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSettingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSettingWaterSettingEnumRuleCall_3_0 = (RuleCall)cSettingAssignment_3.eContents().get(0);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cPumpsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final CrossReference cPumpsPumpCrossReference_5_0_0 = (CrossReference)cPumpsAssignment_5_0.eContents().get(0);
		private final RuleCall cPumpsPumpNumberedElementFQNParserRuleCall_5_0_0_1 = (RuleCall)cPumpsPumpCrossReference_5_0_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cPumpsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final CrossReference cPumpsPumpCrossReference_5_1_1_0 = (CrossReference)cPumpsAssignment_5_1_1.eContents().get(0);
		private final RuleCall cPumpsPumpNumberedElementFQNParserRuleCall_5_1_1_0_1 = (RuleCall)cPumpsPumpCrossReference_5_1_1_0.eContents().get(1);
		private final Keyword cForKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDurationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDurationINTTerminalRuleCall_7_0 = (RuleCall)cDurationAssignment_7.eContents().get(0);
		private final Keyword cHourSKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//IrrigationRule:
		//    'If' expression=Expression 'then' setting=WaterSetting 'for' (pumps+=[Pump|NumberedElementFQN] (',' pumps+=[Pump|NumberedElementFQN])*)+ 'for' duration=INT 'hour(s)'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'If' expression=Expression 'then' setting=WaterSetting 'for' (pumps+=[Pump|NumberedElementFQN] (',' pumps+=[Pump|NumberedElementFQN])*)+ 'for' duration=INT 'hour(s)'
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//setting=WaterSetting
		public Assignment getSettingAssignment_3() { return cSettingAssignment_3; }
		
		//WaterSetting
		public RuleCall getSettingWaterSettingEnumRuleCall_3_0() { return cSettingWaterSettingEnumRuleCall_3_0; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//(pumps+=[Pump|NumberedElementFQN] (',' pumps+=[Pump|NumberedElementFQN])*)+
		public Group getGroup_5() { return cGroup_5; }
		
		//pumps+=[Pump|NumberedElementFQN]
		public Assignment getPumpsAssignment_5_0() { return cPumpsAssignment_5_0; }
		
		//[Pump|NumberedElementFQN]
		public CrossReference getPumpsPumpCrossReference_5_0_0() { return cPumpsPumpCrossReference_5_0_0; }
		
		//NumberedElementFQN
		public RuleCall getPumpsPumpNumberedElementFQNParserRuleCall_5_0_0_1() { return cPumpsPumpNumberedElementFQNParserRuleCall_5_0_0_1; }
		
		//(',' pumps+=[Pump|NumberedElementFQN])*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//pumps+=[Pump|NumberedElementFQN]
		public Assignment getPumpsAssignment_5_1_1() { return cPumpsAssignment_5_1_1; }
		
		//[Pump|NumberedElementFQN]
		public CrossReference getPumpsPumpCrossReference_5_1_1_0() { return cPumpsPumpCrossReference_5_1_1_0; }
		
		//NumberedElementFQN
		public RuleCall getPumpsPumpNumberedElementFQNParserRuleCall_5_1_1_0_1() { return cPumpsPumpNumberedElementFQNParserRuleCall_5_1_1_0_1; }
		
		//'for'
		public Keyword getForKeyword_6() { return cForKeyword_6; }
		
		//duration=INT
		public Assignment getDurationAssignment_7() { return cDurationAssignment_7; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_7_0() { return cDurationINTTerminalRuleCall_7_0; }
		
		//'hour(s)'
		public Keyword getHourSKeyword_8() { return cHourSKeyword_8; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//    AtomicExpression | CompoundExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicExpression | CompoundExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_0() { return cAtomicExpressionParserRuleCall_0; }
		
		//CompoundExpression
		public RuleCall getCompoundExpressionParserRuleCall_1() { return cCompoundExpressionParserRuleCall_1; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSectionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSectionsSectionParserRuleCall_3_0 = (RuleCall)cSectionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Field:
		//    'Field' name=ID '{' (sections+=Section)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Field' name=ID '{' (sections+=Section)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(sections+=Section)*
		public Assignment getSectionsAssignment_3() { return cSectionsAssignment_3; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_3_0() { return cSectionsSectionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NumberedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.NumberedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPumpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NumberedElement:
		//    Field | Section | Pump
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Section | Pump
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Section
		public RuleCall getSectionParserRuleCall_1() { return cSectionParserRuleCall_1; }
		
		//Pump
		public RuleCall getPumpParserRuleCall_2() { return cPumpParserRuleCall_2; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPumpsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPumpsPumpParserRuleCall_3_0 = (RuleCall)cPumpsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Section:
		//    'section' name=ID '{' (pumps+=Pump)+ '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'section' name=ID '{' (pumps+=Pump)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'section'
		public Keyword getSectionKeyword_0() { return cSectionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(pumps+=Pump)+
		public Assignment getPumpsAssignment_3() { return cPumpsAssignment_3; }
		
		//Pump
		public RuleCall getPumpsPumpParserRuleCall_3_0() { return cPumpsPumpParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PumpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Pump");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPumpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Pump:
		//    'pump' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'pump' name=ID
		public Group getGroup() { return cGroup; }
		
		//'pump'
		public Keyword getPumpKeyword_0() { return cPumpKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.AtomicExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForecastKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cForecastLowerBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cForecastLowerBoundINTTerminalRuleCall_3_0 = (RuleCall)cForecastLowerBoundAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cForecastUpperBoundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cForecastUpperBoundINTTerminalRuleCall_5_0 = (RuleCall)cForecastUpperBoundAssignment_5.eContents().get(0);
		private final Keyword cPercentSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFieldAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cFieldFieldCrossReference_8_0 = (CrossReference)cFieldAssignment_8.eContents().get(0);
		private final RuleCall cFieldFieldIDTerminalRuleCall_8_0_1 = (RuleCall)cFieldFieldCrossReference_8_0.eContents().get(1);
		private final Keyword cMoistureKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cMoistureLowerBoundAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cMoistureLowerBoundINTTerminalRuleCall_11_0 = (RuleCall)cMoistureLowerBoundAssignment_11.eContents().get(0);
		private final Keyword cToKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cMoistureUpperBoundAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cMoistureUpperBoundINTTerminalRuleCall_13_0 = (RuleCall)cMoistureUpperBoundAssignment_13.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//AtomicExpression:
		//    '(' 'forecast' '=' forecastLowerBound=INT 'to' forecastUpperBound=INT '%' ',' field=[Field] '.moisture' '=' moistureLowerBound=INT 'to' moistureUpperBound=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'forecast' '=' forecastLowerBound=INT 'to' forecastUpperBound=INT '%' ',' field=[Field] '.moisture' '=' moistureLowerBound=INT 'to' moistureUpperBound=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'forecast'
		public Keyword getForecastKeyword_1() { return cForecastKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//forecastLowerBound=INT
		public Assignment getForecastLowerBoundAssignment_3() { return cForecastLowerBoundAssignment_3; }
		
		//INT
		public RuleCall getForecastLowerBoundINTTerminalRuleCall_3_0() { return cForecastLowerBoundINTTerminalRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//forecastUpperBound=INT
		public Assignment getForecastUpperBoundAssignment_5() { return cForecastUpperBoundAssignment_5; }
		
		//INT
		public RuleCall getForecastUpperBoundINTTerminalRuleCall_5_0() { return cForecastUpperBoundINTTerminalRuleCall_5_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_6() { return cPercentSignKeyword_6; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//field=[Field]
		public Assignment getFieldAssignment_8() { return cFieldAssignment_8; }
		
		//[Field]
		public CrossReference getFieldFieldCrossReference_8_0() { return cFieldFieldCrossReference_8_0; }
		
		//ID
		public RuleCall getFieldFieldIDTerminalRuleCall_8_0_1() { return cFieldFieldIDTerminalRuleCall_8_0_1; }
		
		//'.moisture'
		public Keyword getMoistureKeyword_9() { return cMoistureKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//moistureLowerBound=INT
		public Assignment getMoistureLowerBoundAssignment_11() { return cMoistureLowerBoundAssignment_11; }
		
		//INT
		public RuleCall getMoistureLowerBoundINTTerminalRuleCall_11_0() { return cMoistureLowerBoundINTTerminalRuleCall_11_0; }
		
		//'to'
		public Keyword getToKeyword_12() { return cToKeyword_12; }
		
		//moistureUpperBound=INT
		public Assignment getMoistureUpperBoundAssignment_13() { return cMoistureUpperBoundAssignment_13; }
		
		//INT
		public RuleCall getMoistureUpperBoundINTTerminalRuleCall_13_0() { return cMoistureUpperBoundINTTerminalRuleCall_13_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14() { return cRightParenthesisKeyword_14; }
	}
	public class CompoundExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.CompoundExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLHSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLHSExpressionParserRuleCall_1_0 = (RuleCall)cLHSAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRHSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRHSExpressionParserRuleCall_3_0 = (RuleCall)cRHSAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompoundExpression:
		//     '(' LHS=Expression operator=Operator RHS=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' LHS=Expression operator=Operator RHS=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//LHS=Expression
		public Assignment getLHSAssignment_1() { return cLHSAssignment_1; }
		
		//Expression
		public RuleCall getLHSExpressionParserRuleCall_1_0() { return cLHSExpressionParserRuleCall_1_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_2_0() { return cOperatorOperatorEnumRuleCall_2_0; }
		
		//RHS=Expression
		public Assignment getRHSAssignment_3() { return cRHSAssignment_3; }
		
		//Expression
		public RuleCall getRHSExpressionParserRuleCall_3_0() { return cRHSExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class NumberedElementFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.NumberedElementFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NumberedElementFQN:
		//    ID ("." ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class WaterSettingElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.WaterSetting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLOWLOWKeyword_0_0 = (Keyword)cLOWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDIUMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDIUMMEDIUMKeyword_1_0 = (Keyword)cMEDIUMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHIGHHIGHKeyword_2_0 = (Keyword)cHIGHEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum WaterSetting :
		//    LOW | MEDIUM | HIGH
		//;
		public EnumRule getRule() { return rule; }
		
		//LOW | MEDIUM | HIGH
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LOW
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_0() { return cLOWEnumLiteralDeclaration_0; }
		
		public Keyword getLOWLOWKeyword_0_0() { return cLOWLOWKeyword_0_0; }
		
		//MEDIUM
		public EnumLiteralDeclaration getMEDIUMEnumLiteralDeclaration_1() { return cMEDIUMEnumLiteralDeclaration_1; }
		
		public Keyword getMEDIUMMEDIUMKeyword_1_0() { return cMEDIUMMEDIUMKeyword_1_0; }
		
		//HIGH
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_2() { return cHIGHEnumLiteralDeclaration_2; }
		
		public Keyword getHIGHHIGHKeyword_2_0() { return cHIGHHIGHKeyword_2_0; }
	}
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Operator :
		//    AND | OR
		//;
		public EnumRule getRule() { return rule; }
		
		//AND | OR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}
	
	private final IMSElements pIMS;
	private final IrrigationRuleElements pIrrigationRule;
	private final ExpressionElements pExpression;
	private final FieldElements pField;
	private final NumberedElementElements pNumberedElement;
	private final SectionElements pSection;
	private final PumpElements pPump;
	private final AtomicExpressionElements pAtomicExpression;
	private final CompoundExpressionElements pCompoundExpression;
	private final WaterSettingElements eWaterSetting;
	private final OperatorElements eOperator;
	private final NumberedElementFQNElements pNumberedElementFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IMSGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pIMS = new IMSElements();
		this.pIrrigationRule = new IrrigationRuleElements();
		this.pExpression = new ExpressionElements();
		this.pField = new FieldElements();
		this.pNumberedElement = new NumberedElementElements();
		this.pSection = new SectionElements();
		this.pPump = new PumpElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pCompoundExpression = new CompoundExpressionElements();
		this.eWaterSetting = new WaterSettingElements();
		this.eOperator = new OperatorElements();
		this.pNumberedElementFQN = new NumberedElementFQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.ims.IMS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//IMS:
	//    (fields+=Field)*
	//    (irrigationRules+=IrrigationRule)*
	//    (expressions+=Expression)*
	//;
	public IMSElements getIMSAccess() {
		return pIMS;
	}
	
	public ParserRule getIMSRule() {
		return getIMSAccess().getRule();
	}
	
	//IrrigationRule:
	//    'If' expression=Expression 'then' setting=WaterSetting 'for' (pumps+=[Pump|NumberedElementFQN] (',' pumps+=[Pump|NumberedElementFQN])*)+ 'for' duration=INT 'hour(s)'
	//;
	public IrrigationRuleElements getIrrigationRuleAccess() {
		return pIrrigationRule;
	}
	
	public ParserRule getIrrigationRuleRule() {
		return getIrrigationRuleAccess().getRule();
	}
	
	//Expression:
	//    AtomicExpression | CompoundExpression
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Field:
	//    'Field' name=ID '{' (sections+=Section)* '}'
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//NumberedElement:
	//    Field | Section | Pump
	//;
	public NumberedElementElements getNumberedElementAccess() {
		return pNumberedElement;
	}
	
	public ParserRule getNumberedElementRule() {
		return getNumberedElementAccess().getRule();
	}
	
	//Section:
	//    'section' name=ID '{' (pumps+=Pump)+ '}'
	//;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//Pump:
	//    'pump' name=ID
	//;
	public PumpElements getPumpAccess() {
		return pPump;
	}
	
	public ParserRule getPumpRule() {
		return getPumpAccess().getRule();
	}
	
	//AtomicExpression:
	//    '(' 'forecast' '=' forecastLowerBound=INT 'to' forecastUpperBound=INT '%' ',' field=[Field] '.moisture' '=' moistureLowerBound=INT 'to' moistureUpperBound=INT ')'
	//;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//CompoundExpression:
	//     '(' LHS=Expression operator=Operator RHS=Expression ')'
	//;
	public CompoundExpressionElements getCompoundExpressionAccess() {
		return pCompoundExpression;
	}
	
	public ParserRule getCompoundExpressionRule() {
		return getCompoundExpressionAccess().getRule();
	}
	
	//enum WaterSetting :
	//    LOW | MEDIUM | HIGH
	//;
	public WaterSettingElements getWaterSettingAccess() {
		return eWaterSetting;
	}
	
	public EnumRule getWaterSettingRule() {
		return getWaterSettingAccess().getRule();
	}
	
	//enum Operator :
	//    AND | OR
	//;
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//NumberedElementFQN:
	//    ID ("." ID)*
	//;
	public NumberedElementFQNElements getNumberedElementFQNAccess() {
		return pNumberedElementFQN;
	}
	
	public ParserRule getNumberedElementFQNRule() {
		return getNumberedElementFQNAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

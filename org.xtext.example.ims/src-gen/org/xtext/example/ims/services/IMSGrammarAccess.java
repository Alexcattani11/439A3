/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.ims.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IMSGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class IMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.IMS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIrrigationRulesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIrrigationRulesIrrigationRuleParserRuleCall_0_0 = (RuleCall)cIrrigationRulesAssignment_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldsFieldParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		
		//IMS:
		//    (irrigationRules+=IrrigationRule)*
		//    (expressions+=Expression)*
		//    (fields+=Field)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(irrigationRules+=IrrigationRule)*
		//(expressions+=Expression)*
		//(fields+=Field)*
		public Group getGroup() { return cGroup; }
		
		//(irrigationRules+=IrrigationRule)*
		public Assignment getIrrigationRulesAssignment_0() { return cIrrigationRulesAssignment_0; }
		
		//IrrigationRule
		public RuleCall getIrrigationRulesIrrigationRuleParserRuleCall_0_0() { return cIrrigationRulesIrrigationRuleParserRuleCall_0_0; }
		
		//(expressions+=Expression)*
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_0() { return cExpressionsExpressionParserRuleCall_1_0; }
		
		//(fields+=Field)*
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_0() { return cFieldsFieldParserRuleCall_2_0; }
	}
	public class IrrigationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.IrrigationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSettingAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSettingWaterSettingEnumRuleCall_5_0 = (RuleCall)cSettingAssignment_5.eContents().get(0);
		private final Keyword cForKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cPumpsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final CrossReference cPumpsPumpCrossReference_7_0_0 = (CrossReference)cPumpsAssignment_7_0.eContents().get(0);
		private final RuleCall cPumpsPumpIDTerminalRuleCall_7_0_0_1 = (RuleCall)cPumpsPumpCrossReference_7_0_0.eContents().get(1);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cPumpsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final CrossReference cPumpsPumpCrossReference_7_1_1_0 = (CrossReference)cPumpsAssignment_7_1_1.eContents().get(0);
		private final RuleCall cPumpsPumpIDTerminalRuleCall_7_1_1_0_1 = (RuleCall)cPumpsPumpCrossReference_7_1_1_0.eContents().get(1);
		private final Keyword cForKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDurationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDurationINTTerminalRuleCall_9_0 = (RuleCall)cDurationAssignment_9.eContents().get(0);
		private final Keyword cHourKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//IrrigationRule:
		//    'If' '(' expression=Expression ')' 'then' setting=WaterSetting 'for' (pumps+=[Pump] (',' pumps+=[Pump])*)+ 'for' duration=INT 'hour'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'If' '(' expression=Expression ')' 'then' setting=WaterSetting 'for' (pumps+=[Pump] (',' pumps+=[Pump])*)+ 'for' duration=INT 'hour'
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//setting=WaterSetting
		public Assignment getSettingAssignment_5() { return cSettingAssignment_5; }
		
		//WaterSetting
		public RuleCall getSettingWaterSettingEnumRuleCall_5_0() { return cSettingWaterSettingEnumRuleCall_5_0; }
		
		//'for'
		public Keyword getForKeyword_6() { return cForKeyword_6; }
		
		//(pumps+=[Pump] (',' pumps+=[Pump])*)+
		public Group getGroup_7() { return cGroup_7; }
		
		//pumps+=[Pump]
		public Assignment getPumpsAssignment_7_0() { return cPumpsAssignment_7_0; }
		
		//[Pump]
		public CrossReference getPumpsPumpCrossReference_7_0_0() { return cPumpsPumpCrossReference_7_0_0; }
		
		//ID
		public RuleCall getPumpsPumpIDTerminalRuleCall_7_0_0_1() { return cPumpsPumpIDTerminalRuleCall_7_0_0_1; }
		
		//(',' pumps+=[Pump])*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//','
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }
		
		//pumps+=[Pump]
		public Assignment getPumpsAssignment_7_1_1() { return cPumpsAssignment_7_1_1; }
		
		//[Pump]
		public CrossReference getPumpsPumpCrossReference_7_1_1_0() { return cPumpsPumpCrossReference_7_1_1_0; }
		
		//ID
		public RuleCall getPumpsPumpIDTerminalRuleCall_7_1_1_0_1() { return cPumpsPumpIDTerminalRuleCall_7_1_1_0_1; }
		
		//'for'
		public Keyword getForKeyword_8() { return cForKeyword_8; }
		
		//duration=INT
		public Assignment getDurationAssignment_9() { return cDurationAssignment_9; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_9_0() { return cDurationINTTerminalRuleCall_9_0; }
		
		//'hour'
		public Keyword getHourKeyword_10() { return cHourKeyword_10; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//    AtomicExpression | CompoundExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicExpression | CompoundExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_0() { return cAtomicExpressionParserRuleCall_0; }
		
		//CompoundExpression
		public RuleCall getCompoundExpressionParserRuleCall_1() { return cCompoundExpressionParserRuleCall_1; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssetNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssetNumberIDTerminalRuleCall_1_0 = (RuleCall)cAssetNumberAssignment_1.eContents().get(0);
		private final Assignment cSectionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSectionsSectionParserRuleCall_2_0 = (RuleCall)cSectionsAssignment_2.eContents().get(0);
		
		//Field:
		//    'F' assetNumber=ID
		//    (sections+=Section)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'F' assetNumber=ID
		//(sections+=Section)*
		public Group getGroup() { return cGroup; }
		
		//'F'
		public Keyword getFKeyword_0() { return cFKeyword_0; }
		
		//assetNumber=ID
		public Assignment getAssetNumberAssignment_1() { return cAssetNumberAssignment_1; }
		
		//ID
		public RuleCall getAssetNumberIDTerminalRuleCall_1_0() { return cAssetNumberIDTerminalRuleCall_1_0; }
		
		//(sections+=Section)*
		public Assignment getSectionsAssignment_2() { return cSectionsAssignment_2; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_2_0() { return cSectionsSectionParserRuleCall_2_0; }
	}
	public class NumberedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.NumberedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPumpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NumberedElement:
		//    Field | Section | Pump
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Section | Pump
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Section
		public RuleCall getSectionParserRuleCall_1() { return cSectionParserRuleCall_1; }
		
		//Pump
		public RuleCall getPumpParserRuleCall_2() { return cPumpParserRuleCall_2; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssetNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssetNumberIDTerminalRuleCall_0_0 = (RuleCall)cAssetNumberAssignment_0.eContents().get(0);
		private final Assignment cPumpsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPumpsPumpParserRuleCall_1_0 = (RuleCall)cPumpsAssignment_1.eContents().get(0);
		
		//Section:
		//    assetNumber=ID
		//    (pumps+=Pump)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//assetNumber=ID
		//(pumps+=Pump)*
		public Group getGroup() { return cGroup; }
		
		//assetNumber=ID
		public Assignment getAssetNumberAssignment_0() { return cAssetNumberAssignment_0; }
		
		//ID
		public RuleCall getAssetNumberIDTerminalRuleCall_0_0() { return cAssetNumberIDTerminalRuleCall_0_0; }
		
		//(pumps+=Pump)*
		public Assignment getPumpsAssignment_1() { return cPumpsAssignment_1; }
		
		//Pump
		public RuleCall getPumpsPumpParserRuleCall_1_0() { return cPumpsPumpParserRuleCall_1_0; }
	}
	public class PumpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Pump");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssetNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssetNumberIDTerminalRuleCall_1_0 = (RuleCall)cAssetNumberAssignment_1.eContents().get(0);
		
		//Pump:
		//    'P' assetNumber=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'P' assetNumber=ID
		public Group getGroup() { return cGroup; }
		
		//'P'
		public Keyword getPKeyword_0() { return cPKeyword_0; }
		
		//assetNumber=ID
		public Assignment getAssetNumberAssignment_1() { return cAssetNumberAssignment_1; }
		
		//ID
		public RuleCall getAssetNumberIDTerminalRuleCall_1_0() { return cAssetNumberIDTerminalRuleCall_1_0; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.AtomicExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForecastKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cForecastLowerBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cForecastLowerBoundINTTerminalRuleCall_2_0 = (RuleCall)cForecastLowerBoundAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cForecastUpperBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cForecastUpperBoundINTTerminalRuleCall_4_0 = (RuleCall)cForecastUpperBoundAssignment_4.eContents().get(0);
		private final Keyword cPercentSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFieldAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cFieldFieldCrossReference_7_0 = (CrossReference)cFieldAssignment_7.eContents().get(0);
		private final RuleCall cFieldFieldIDTerminalRuleCall_7_0_1 = (RuleCall)cFieldFieldCrossReference_7_0.eContents().get(1);
		private final Keyword cMoistureKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMoistureLowerBoundAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMoistureLowerBoundINTTerminalRuleCall_10_0 = (RuleCall)cMoistureLowerBoundAssignment_10.eContents().get(0);
		private final Keyword cToKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cMoistureUpperBoundAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMoistureUpperBoundINTTerminalRuleCall_12_0 = (RuleCall)cMoistureUpperBoundAssignment_12.eContents().get(0);
		
		//AtomicExpression:
		//    'forecast' '=' forecastLowerBound=INT 'to' forecastUpperBound=INT '%' ',' field=[Field] '.moisture' '=' moistureLowerBound=INT 'to' moistureUpperBound=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'forecast' '=' forecastLowerBound=INT 'to' forecastUpperBound=INT '%' ',' field=[Field] '.moisture' '=' moistureLowerBound=INT 'to' moistureUpperBound=INT
		public Group getGroup() { return cGroup; }
		
		//'forecast'
		public Keyword getForecastKeyword_0() { return cForecastKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//forecastLowerBound=INT
		public Assignment getForecastLowerBoundAssignment_2() { return cForecastLowerBoundAssignment_2; }
		
		//INT
		public RuleCall getForecastLowerBoundINTTerminalRuleCall_2_0() { return cForecastLowerBoundINTTerminalRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//forecastUpperBound=INT
		public Assignment getForecastUpperBoundAssignment_4() { return cForecastUpperBoundAssignment_4; }
		
		//INT
		public RuleCall getForecastUpperBoundINTTerminalRuleCall_4_0() { return cForecastUpperBoundINTTerminalRuleCall_4_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_5() { return cPercentSignKeyword_5; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//field=[Field]
		public Assignment getFieldAssignment_7() { return cFieldAssignment_7; }
		
		//[Field]
		public CrossReference getFieldFieldCrossReference_7_0() { return cFieldFieldCrossReference_7_0; }
		
		//ID
		public RuleCall getFieldFieldIDTerminalRuleCall_7_0_1() { return cFieldFieldIDTerminalRuleCall_7_0_1; }
		
		//'.moisture'
		public Keyword getMoistureKeyword_8() { return cMoistureKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//moistureLowerBound=INT
		public Assignment getMoistureLowerBoundAssignment_10() { return cMoistureLowerBoundAssignment_10; }
		
		//INT
		public RuleCall getMoistureLowerBoundINTTerminalRuleCall_10_0() { return cMoistureLowerBoundINTTerminalRuleCall_10_0; }
		
		//'to'
		public Keyword getToKeyword_11() { return cToKeyword_11; }
		
		//moistureUpperBound=INT
		public Assignment getMoistureUpperBoundAssignment_12() { return cMoistureUpperBoundAssignment_12; }
		
		//INT
		public RuleCall getMoistureUpperBoundINTTerminalRuleCall_12_0() { return cMoistureUpperBoundINTTerminalRuleCall_12_0; }
	}
	public class CompoundExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.CompoundExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLHSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLHSExpressionParserRuleCall_1_0 = (RuleCall)cLHSAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRHSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRHSExpressionParserRuleCall_3_0 = (RuleCall)cRHSAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompoundExpression:
		//    '(' LHS=Expression operator=Operator RHS=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' LHS=Expression operator=Operator RHS=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//LHS=Expression
		public Assignment getLHSAssignment_1() { return cLHSAssignment_1; }
		
		//Expression
		public RuleCall getLHSExpressionParserRuleCall_1_0() { return cLHSExpressionParserRuleCall_1_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_2_0() { return cOperatorOperatorEnumRuleCall_2_0; }
		
		//RHS=Expression
		public Assignment getRHSAssignment_3() { return cRHSAssignment_3; }
		
		//Expression
		public RuleCall getRHSExpressionParserRuleCall_3_0() { return cRHSExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	public class WaterSettingElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.WaterSetting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLOWLOWKeyword_0_0 = (Keyword)cLOWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDIUMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDIUMMEDIUMKeyword_1_0 = (Keyword)cMEDIUMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHIGHHIGHKeyword_2_0 = (Keyword)cHIGHEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum WaterSetting :
		//    LOW | MEDIUM | HIGH
		//;
		public EnumRule getRule() { return rule; }
		
		//LOW | MEDIUM | HIGH
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LOW
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_0() { return cLOWEnumLiteralDeclaration_0; }
		
		public Keyword getLOWLOWKeyword_0_0() { return cLOWLOWKeyword_0_0; }
		
		//MEDIUM
		public EnumLiteralDeclaration getMEDIUMEnumLiteralDeclaration_1() { return cMEDIUMEnumLiteralDeclaration_1; }
		
		public Keyword getMEDIUMMEDIUMKeyword_1_0() { return cMEDIUMMEDIUMKeyword_1_0; }
		
		//HIGH
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_2() { return cHIGHEnumLiteralDeclaration_2; }
		
		public Keyword getHIGHHIGHKeyword_2_0() { return cHIGHHIGHKeyword_2_0; }
	}
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ims.IMS.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Operator :
		//    AND | OR
		//;
		public EnumRule getRule() { return rule; }
		
		//AND | OR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}
	
	private final IMSElements pIMS;
	private final IrrigationRuleElements pIrrigationRule;
	private final ExpressionElements pExpression;
	private final FieldElements pField;
	private final NumberedElementElements pNumberedElement;
	private final SectionElements pSection;
	private final PumpElements pPump;
	private final AtomicExpressionElements pAtomicExpression;
	private final CompoundExpressionElements pCompoundExpression;
	private final WaterSettingElements eWaterSetting;
	private final OperatorElements eOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IMSGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pIMS = new IMSElements();
		this.pIrrigationRule = new IrrigationRuleElements();
		this.pExpression = new ExpressionElements();
		this.pField = new FieldElements();
		this.pNumberedElement = new NumberedElementElements();
		this.pSection = new SectionElements();
		this.pPump = new PumpElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pCompoundExpression = new CompoundExpressionElements();
		this.eWaterSetting = new WaterSettingElements();
		this.eOperator = new OperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.ims.IMS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//IMS:
	//    (irrigationRules+=IrrigationRule)*
	//    (expressions+=Expression)*
	//    (fields+=Field)*;
	public IMSElements getIMSAccess() {
		return pIMS;
	}
	
	public ParserRule getIMSRule() {
		return getIMSAccess().getRule();
	}
	
	//IrrigationRule:
	//    'If' '(' expression=Expression ')' 'then' setting=WaterSetting 'for' (pumps+=[Pump] (',' pumps+=[Pump])*)+ 'for' duration=INT 'hour'
	//;
	public IrrigationRuleElements getIrrigationRuleAccess() {
		return pIrrigationRule;
	}
	
	public ParserRule getIrrigationRuleRule() {
		return getIrrigationRuleAccess().getRule();
	}
	
	//Expression:
	//    AtomicExpression | CompoundExpression
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Field:
	//    'F' assetNumber=ID
	//    (sections+=Section)*
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//NumberedElement:
	//    Field | Section | Pump
	//;
	public NumberedElementElements getNumberedElementAccess() {
		return pNumberedElement;
	}
	
	public ParserRule getNumberedElementRule() {
		return getNumberedElementAccess().getRule();
	}
	
	//Section:
	//    assetNumber=ID
	//    (pumps+=Pump)*
	//;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//Pump:
	//    'P' assetNumber=ID
	//;
	public PumpElements getPumpAccess() {
		return pPump;
	}
	
	public ParserRule getPumpRule() {
		return getPumpAccess().getRule();
	}
	
	//AtomicExpression:
	//    'forecast' '=' forecastLowerBound=INT 'to' forecastUpperBound=INT '%' ',' field=[Field] '.moisture' '=' moistureLowerBound=INT 'to' moistureUpperBound=INT
	//;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//CompoundExpression:
	//    '(' LHS=Expression operator=Operator RHS=Expression ')'
	//;
	public CompoundExpressionElements getCompoundExpressionAccess() {
		return pCompoundExpression;
	}
	
	public ParserRule getCompoundExpressionRule() {
		return getCompoundExpressionAccess().getRule();
	}
	
	//enum WaterSetting :
	//    LOW | MEDIUM | HIGH
	//;
	public WaterSettingElements getWaterSettingAccess() {
		return eWaterSetting;
	}
	
	public EnumRule getWaterSettingRule() {
		return getWaterSettingAccess().getRule();
	}
	
	//enum Operator :
	//    AND | OR
	//;
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

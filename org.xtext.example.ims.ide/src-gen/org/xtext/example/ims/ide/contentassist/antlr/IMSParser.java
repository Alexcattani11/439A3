/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.ims.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.ims.ide.contentassist.antlr.internal.InternalIMSParser;
import org.xtext.example.ims.services.IMSGrammarAccess;

public class IMSParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(IMSGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, IMSGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getNumberedElementAccess().getAlternatives(), "rule__NumberedElement__Alternatives");
			builder.put(grammarAccess.getWaterSettingAccess().getAlternatives(), "rule__WaterSetting__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getIMSAccess().getGroup(), "rule__IMS__Group__0");
			builder.put(grammarAccess.getIrrigationRuleAccess().getGroup(), "rule__IrrigationRule__Group__0");
			builder.put(grammarAccess.getIrrigationRuleAccess().getGroup_5(), "rule__IrrigationRule__Group_5__0");
			builder.put(grammarAccess.getIrrigationRuleAccess().getGroup_5_1(), "rule__IrrigationRule__Group_5_1__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getSectionAccess().getGroup(), "rule__Section__Group__0");
			builder.put(grammarAccess.getPumpAccess().getGroup(), "rule__Pump__Group__0");
			builder.put(grammarAccess.getAtomicExpressionAccess().getGroup(), "rule__AtomicExpression__Group__0");
			builder.put(grammarAccess.getCompoundExpressionAccess().getGroup(), "rule__CompoundExpression__Group__0");
			builder.put(grammarAccess.getNumberedElementFQNAccess().getGroup(), "rule__NumberedElementFQN__Group__0");
			builder.put(grammarAccess.getNumberedElementFQNAccess().getGroup_1(), "rule__NumberedElementFQN__Group_1__0");
			builder.put(grammarAccess.getIMSAccess().getFieldsAssignment_0(), "rule__IMS__FieldsAssignment_0");
			builder.put(grammarAccess.getIMSAccess().getIrrigationRulesAssignment_1(), "rule__IMS__IrrigationRulesAssignment_1");
			builder.put(grammarAccess.getIMSAccess().getExpressionsAssignment_2(), "rule__IMS__ExpressionsAssignment_2");
			builder.put(grammarAccess.getIrrigationRuleAccess().getExpressionAssignment_1(), "rule__IrrigationRule__ExpressionAssignment_1");
			builder.put(grammarAccess.getIrrigationRuleAccess().getSettingAssignment_3(), "rule__IrrigationRule__SettingAssignment_3");
			builder.put(grammarAccess.getIrrigationRuleAccess().getPumpsAssignment_5_0(), "rule__IrrigationRule__PumpsAssignment_5_0");
			builder.put(grammarAccess.getIrrigationRuleAccess().getPumpsAssignment_5_1_1(), "rule__IrrigationRule__PumpsAssignment_5_1_1");
			builder.put(grammarAccess.getIrrigationRuleAccess().getDurationAssignment_7(), "rule__IrrigationRule__DurationAssignment_7");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
			builder.put(grammarAccess.getFieldAccess().getSectionsAssignment_3(), "rule__Field__SectionsAssignment_3");
			builder.put(grammarAccess.getSectionAccess().getNameAssignment_1(), "rule__Section__NameAssignment_1");
			builder.put(grammarAccess.getSectionAccess().getPumpsAssignment_3(), "rule__Section__PumpsAssignment_3");
			builder.put(grammarAccess.getPumpAccess().getNameAssignment_1(), "rule__Pump__NameAssignment_1");
			builder.put(grammarAccess.getAtomicExpressionAccess().getForecastLowerBoundAssignment_3(), "rule__AtomicExpression__ForecastLowerBoundAssignment_3");
			builder.put(grammarAccess.getAtomicExpressionAccess().getForecastUpperBoundAssignment_5(), "rule__AtomicExpression__ForecastUpperBoundAssignment_5");
			builder.put(grammarAccess.getAtomicExpressionAccess().getFieldAssignment_8(), "rule__AtomicExpression__FieldAssignment_8");
			builder.put(grammarAccess.getAtomicExpressionAccess().getMoistureLowerBoundAssignment_11(), "rule__AtomicExpression__MoistureLowerBoundAssignment_11");
			builder.put(grammarAccess.getAtomicExpressionAccess().getMoistureUpperBoundAssignment_13(), "rule__AtomicExpression__MoistureUpperBoundAssignment_13");
			builder.put(grammarAccess.getCompoundExpressionAccess().getLHSAssignment_1(), "rule__CompoundExpression__LHSAssignment_1");
			builder.put(grammarAccess.getCompoundExpressionAccess().getOperatorAssignment_2(), "rule__CompoundExpression__OperatorAssignment_2");
			builder.put(grammarAccess.getCompoundExpressionAccess().getRHSAssignment_3(), "rule__CompoundExpression__RHSAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private IMSGrammarAccess grammarAccess;

	@Override
	protected InternalIMSParser createParser() {
		InternalIMSParser result = new InternalIMSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IMSGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IMSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
